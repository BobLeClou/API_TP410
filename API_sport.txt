openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:

  /sport:
    put:
      tags:
        - sport
      summary: Update an existing sport
      description: Update an existing sport by Id
      operationId: updateSport
      requestBody:
        description: Update an existent sport in the olympic
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sport'
          application/xml:
            schema:
              $ref: '#/components/schemas/Sport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sport'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Sport'
        '400':
          description: Invalid ID supplied
        '404':
          description: Sport not found
        '422':
          description: Validation exception
    post:
      tags:
        - sport
      summary: Add a new sport to the olympic
      description: Add a new sport to the olympic
      operationId: addSport
      requestBody:
        description: Create a new sport in the olympic
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sport'
          application/xml:
            schema:
              $ref: '#/components/schemas/Sport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sport'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Sport'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /sport/name/{name}:
    get:
      tags:
        - sport
      summary: Find Sport by name
      description: Do you can test to find a sport with a name.
      operationId: findSportsByName
      parameters:
        - name: name
          in: path
          description: ID of sport to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Sport'          
            application/xml:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Sport'
        '400':
          description: Invalid name value
  /sport/id/{sportId}:
    get:
      tags:
        - sport
      summary: Find sport by ID
      description: Returns a single sport
      operationId: getSportById
      parameters:
        - name: sportId
          in: path
          description: ID of sport to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Sport'
        '400':
          description: Invalid ID supplied
        '404':
          description: Sport not found
          
components:
  schemas:
    Sport:
      required:
        - sport_id
        - name
      type: object
      properties:
        sport_id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: foorball
        category:
          type: string
          example: athleticism
        photoSport:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoSport
        finalDate:
          type: string
          description: Final date
          example: "2024-08-01"
          format: date
      xml:
        name: sport
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'